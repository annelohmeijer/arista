"""Sync database schema

Revision ID: dfac5065a4b4
Revises: 13c25ade546b
Create Date: 2024-12-08 14:12:20.793424

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel

from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'dfac5065a4b4'
down_revision: Union[str, None] = '13c25ade546b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('btc_monthly')
    op.drop_table('btc_90d_annualised_basis')
    op.drop_table('btc_quarterly')
    op.drop_table('btc_perpetual')
    op.drop_table('btc_30d_annualised_basis')
    op.add_column('deribit_futures', sa.Column('size', sa.Float(), nullable=True))
    op.add_column('funding_rate', sa.Column('exchange', sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.add_column('funding_rate', sa.Column('o', sa.Float(), nullable=False))
    op.add_column('funding_rate', sa.Column('h', sa.Float(), nullable=False))
    op.add_column('funding_rate', sa.Column('l', sa.Float(), nullable=False))
    op.add_column('funding_rate', sa.Column('c', sa.Float(), nullable=False))
    op.add_column('funding_rate', sa.Column('t', sa.Float(), nullable=False))
    op.drop_constraint('fr_symbol_time_unique_constraint', 'funding_rate', type_='unique')
    op.drop_column('funding_rate', 'aggregated_funding_rate')
    op.drop_column('funding_rate', 'source')
    op.drop_column('funding_rate', 'utc')
    op.drop_column('funding_rate', 'timestamp')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('funding_rate', sa.Column('timestamp', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('funding_rate', sa.Column('utc', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('funding_rate', sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('funding_rate', sa.Column('aggregated_funding_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.create_unique_constraint('fr_symbol_time_unique_constraint', 'funding_rate', ['symbol', 'timestamp', 'utc'])
    op.drop_column('funding_rate', 't')
    op.drop_column('funding_rate', 'c')
    op.drop_column('funding_rate', 'l')
    op.drop_column('funding_rate', 'h')
    op.drop_column('funding_rate', 'o')
    op.drop_column('funding_rate', 'exchange')
    op.drop_column('deribit_futures', 'size')
    op.create_table('btc_30d_annualised_basis',
    sa.Column('monthly_future_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('perpetual_future_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('datetime_', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('days_between_future_and_datetime', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('expiration_date', sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.create_table('btc_perpetual',
    sa.Column('asset', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('instrument', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('future_reference', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('expiration', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('unix_timestamp', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('datetime_', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('perpetual_future_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True)
    )
    op.create_table('btc_quarterly',
    sa.Column('asset', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('instrument', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('future_reference', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('expiration', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('unix_timestamp', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('datetime_', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quarterly_future_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True)
    )
    op.create_table('btc_90d_annualised_basis',
    sa.Column('quarterly_future_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('perpetual_future_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('datetime_', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('days_between_future_and_datetime', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('expiration_date', sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.create_table('btc_monthly',
    sa.Column('datetime_', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('future_reference', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('days_between_30d_and_future', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('days_between_future_and_datetime', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('instrument', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rn', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('monthly_future_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True)
    )
    # ### end Alembic commands ###
